using Microsoft.EntityFrameworkCore.ChangeTracking;
using NeuralTech.Enums;
using Newtonsoft.Json;

namespace NeuralTech.EntityFramework.Entities
{
    /// <summary>
    /// Represents an audit entry that captures the changes made to an entity during a database operation.
    /// This class is used to create an <see cref="Audit"/> record that can be saved to the database for auditing purposes.
    /// </summary>
    public class AuditEntry
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditEntry"/> class with the specified entity entry.
        /// </summary>
        /// <param name="entry">
        /// The <see cref="EntityEntry"/> instance provided by Entity Framework, representing the entity being tracked.
        /// </param>
        public AuditEntry(EntityEntry entry)
        {
            Entry = entry;
        }

        /// <summary>
        /// Gets the <see cref="EntityEntry"/> associated with this audit entry.
        /// </summary>
        public EntityEntry Entry { get; }

        /// <summary>
        /// Gets or sets the identifier of the user who made the changes.
        /// This may be null if the changes were made by the system or an anonymous user.
        /// </summary>
        public string? UserId { get; set; }

        /// <summary>
        /// Gets or sets the name of the database table affected by the changes.
        /// This property is essential for identifying which table the audit entry pertains to.
        /// </summary>
        public string TableName { get; set; } = string.Empty;

        /// <summary>
        /// Gets the dictionary of primary key values for the entity.
        /// Key is the property name, and value is the property value.
        /// </summary>
        public Dictionary<string, object> KeyValues { get; } = new();

        /// <summary>
        /// Gets the original values of the entity's properties before the changes were made.
        /// Used for tracking what data was modified.
        /// </summary>
        public Dictionary<string, object> OldValues { get; } = new();

        /// <summary>
        /// Gets the current values of the entity's properties after the changes were made.
        /// Reflects the new state of the entity.
        /// </summary>
        public Dictionary<string, object> NewValues { get; } = new();

        /// <summary>
        /// Gets the list of properties that have temporary values.
        /// Temporary properties are those that will have their values generated by the database (e.g., identity columns).
        /// </summary>
        public List<PropertyEntry> TemporaryProperties { get; } = new();

        /// <summary>
        /// Gets or sets the type of action that triggered the audit entry.
        /// Indicates whether the operation was an Insert, Update, or Delete.
        /// </summary>
        public AuditActionType ActionType { get; set; }

        /// <summary>
        /// Gets the list of property names that were changed during the operation.
        /// Useful for identifying which specific fields were modified.
        /// </summary>
        public List<string> ChangedColumns { get; } = new();

        /// <summary>
        /// Gets a value indicating whether the entity has temporary properties that need to be set after the save operation.
        /// </summary>
        public bool HasTemporaryProperties => TemporaryProperties.Any();

        /// <summary>
        /// Converts this <see cref="AuditEntry"/> into an <see cref="Audit"/> entity that can be saved to the database.
        /// </summary>
        /// <param name="userId">
        /// The identifier of the user creating the audit record.
        /// This is often the same as <see cref="UserId"/>, but may differ if the audit is being recorded by a system process.
        /// </param>
        /// <returns>An <see cref="Audit"/> entity populated with data from this audit entry.</returns>
        public Audit ToAudit(string? userId)
        {
            var audit = new Audit
            {
                UserId = UserId,
                ActionType = ActionType,
                TableName = TableName,
                EventTime = DateTime.UtcNow,
                PrimaryKey = JsonConvert.SerializeObject(KeyValues),
                OldValues = OldValues.Count > 0 ? JsonConvert.SerializeObject(OldValues) : null,
                NewValues = NewValues.Count > 0 ? JsonConvert.SerializeObject(NewValues) : null,
                AffectedColumns = ChangedColumns.Count > 0 ? JsonConvert.SerializeObject(ChangedColumns) : null,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = userId ?? "System"
            };
            return audit;
        }
    }
}
